# 遇到多个构造器参数时要考虑用构建器

---
## 重叠构造器
　　这一章的内容很好理解，相信大家在写 Java 程序的时候也遇到过，使用一个 类 ，而这个类有多个重载的构造函数，当然一般开发的 **API** 设计的还是比较合理，不会有多余的参数，一些比较强大的框架 **API** 可选参数多的时候也会提供一个默认的实现。一句话：**重叠构造器模式可行，但是当哟u许多参数的时候，客户端代码会很难编写，并且难以阅读**，你需要很好的查看文档，每个参数对应的作用。
## JavaBeans模式构建
  使用 **JavaBeans** 模式构建复杂对象，即 提供无参的构造函数，对对象的具体设置提供一些方法来操作 ，比如
```
NutritionFacts cocaCola = new NutritionFacts();
cocaCola.setServingSize(40);
cocaCola.setServing(8);
cocaCola.setCalories(100);
...
```
采用 **JavaBeans** 模式自身有这严重的缺点，因为构造过程被分到了几个调用中，在构造中 **JavaBean** 可能处于不一致的状态。类无法仅仅通过判断构造器参数的有效性来保证一致性。还有一个严重的弊端是，**JavaBeans 模式阻止了把类做成不可变的可能。**，这就需要我们付出额外的操作来保证它的线程安全。

## Builder模式
　　**Builder模式**，其实就是把这个类需要的信息都统一交给另外一个 **Builder类** 来提供，客户端在 **builder** 对象上调用类似 setter的方法，来设置每个相关的可选参数，相信每个人在编程的过程中调用公共或者第三方API,都遇到过采用这种方式来构建对象的情况，这里也就不提供代码例子了。需要注意的一个特征是，**Builder类** 是不可变的，所有的默认参数都单独放在一个地方。
　　Builder的构建过程中，可以对参数加以控制，当不符合条件时抛出**IllegalArgumentException**,这样做的好处是你一旦传递了无效的参数，立即就会发现约束条件失败，而不必等到build方法。
　　Java 中传统的传统的抽象工厂是 **Class** 对象，它用 newInstance方法充当build方法的一部分，newInstance默认会调用类的无参构造函数，但是这个类的无参构造函数可能根本不存在，而且可怕的是你不会受到编译期的错误，你必须在运行期对异常进行处理。相反，使用 **Builder** 模式，在编译器就能知道出错了。
## Builder 模式的不足
　　Builder 的模式，为了创建一个需要的对象，我们需要先创建它相应的 Builder 对象，虽然这点创建对象的开销在实践中不那么影响，但是如果是十分注重性能的情况下。。。
　　Buillder 模式还比重叠构建起的模式要冗长，因为它一般用在多参数的情况下。所以一般只有在4个以上的参数才使用 Buildre 模式，但是注意，如果你考虑到将来你可能需要添加更多的参数，你应该在一开始就使用构建器模式，等到类需要多个参数的时候，往往就不可控制了。

## 总结
  如果一个类的构造器或者静态工厂中具有多个参数，设计这种类时，**Buildre模式** 是个不错的选择。采用 **Buildre** 模式的客户端代码易于阅读和编写，构建器也比 **JavaBeans** 的模式要安全
  




